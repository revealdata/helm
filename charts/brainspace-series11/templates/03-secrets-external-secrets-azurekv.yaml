{{- if eq .Values.secrets.provider "external-secrets" }}
{{- if eq .Values.secrets.externalSecrets.provider "azurekv" }}

# Using Azure KeyVault
{{- range .Values.secrets.secretDefinitions }}
{{- if not .useExistingSecret }}

{{- if .azureClientID }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .eksSecretName }}-credentials
  namespace: {{ $.Values.global.namespace | default $.Release.Name }}
type: Opaque
data:
  ClientID: {{ .azureClientID | b64enc }}
  ClientSecret: {{ .azureClientSecret | b64enc }}
{{- end }}
{{- if .azureTennantId }}
---
apiVersion: external-secrets.io/v1alpha1
kind: SecretStore
metadata:
  name: {{ .eksSecretName }}-store
  namespace: {{ $.Values.global.namespace | default $.Release.Name }}
spec:
  provider:
    azurekv:
      tenantId: {{ .azureTennantId | quote }}
      vaultUrl: {{ .azureVaultUrl | quote }}
      authSecretRef:
        clientId:
          name: {{ .eksSecretName }}-credentials
          key: ClientID
        clientSecret:
          name: {{ .eksSecretName }}-credentials
          key: ClientSecret
{{- end }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .eksSecretName }}
  namespace: {{ $.Values.global.namespace | default $.Release.Name }}
spec:
  refreshInterval: 10m
  secretStoreRef:
    name: {{ .eksSecretName }}-store
    kind: SecretStore
  target:
    name: {{ .eksSecretName }}
    creationPolicy: Owner
  {{- if .data }}
  data:
    {{- range .data }}
    {{- $defaults := index $.Values.defaults.secrets .secretKey }}
    {{- $values := deepCopy . | mergeOverwrite (deepCopy $defaults) }}
    - secretKey: {{ $values.secretKey }}
      remoteRef:
        key: {{ $values.property }}
    {{- end }}
  {{- end }}

{{- end }}
{{- end }}

{{- end }}
{{- end }}