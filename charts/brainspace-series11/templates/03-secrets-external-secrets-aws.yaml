{{- if eq  .Values.secrets.provider "external-secrets" }}
{{- if eq  .Values.secrets.externalSecrets.provider "aws" }}

---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: brainspace-secret-store
  namespace: {{ $.Values.global.namespace | default $.Release.Name }}
spec:
  provider:
    aws:
      service: SecretsManager
      {{- if $.Values.global.serviceAccount }}
      {{- if $.Values.global.serviceAccount.roleArn }}
      role: {{ $.Values.global.serviceAccount.roleArn | quote }}
      {{- end }}{{- end }}
      region: {{ $.Values.secrets.externalSecrets.aws.region | default "us-east-1" }}

{{- range .Values.secrets.secretDefinitions }}
{{- if not .useExistingSecret }}
{{- $awsSecretName := .awsSecretName }}
---
# Using AWS SecretsManager ({{ .awsSecretName }})
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .eksSecretName }}
  namespace: {{ $.Values.global.namespace | default $.Release.Name }}
spec:
  refreshInterval: 10m
  secretStoreRef:
    name: brainspace-secret-store
    kind: SecretStore
  target:
    name: {{ .eksSecretName }}
    creationPolicy: Owner
  {{- if .data }}
  data:
    {{- range .data }}
    {{- $defaults := index $.Values.defaults.secrets .secretKey }}
    {{- $values := deepCopy . | mergeOverwrite (deepCopy $defaults) }}
    - secretKey: {{ $values.secretKey }}
      remoteRef:
        key: {{ $awsSecretName  }}
        property: {{ $values.property }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}

{{- end }}
{{- end }}