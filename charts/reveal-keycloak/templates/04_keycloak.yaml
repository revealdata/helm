---
# Deployment: keycloak
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  labels:
    app.kubernetes.io/name: keycloak
    app.kubernetes.io/part-of: keycloak
    app.kubernetes.io/component: application
spec:
  selector:
    matchLabels:
      app: keycloak
  progressDeadlineSeconds: 600
  replicas: {{ .Values.keycloak.replicas | default 1 }}
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: keycloak
      {{- if .Values.keycloak.reloadOnUpgrade }}
      annotations:
        timestamp: {{ now | quote }}
      {{- end }}
    spec:
      hostname: keycloak
      nodeSelector:
        kubernetes.io/os: linux
        kubernetes.io/arch: amd64
        {{- if .Values.keycloak.nodegroup }}
        alpha.eksctl.io/nodegroup-name: {{ .Values.keycloak.nodegroup }}
        {{- end }}
      {{- if .Values.secrets.serviceAccount }}
      {{- if .Values.secrets.serviceAccount.roleArn }}
      serviceAccountName: aws-secrets-provider-sa
      {{- end }}{{- end }}
      volumes:
        {{- if eq  .Values.secrets.provider "secrets-store-csi" }}
        - name: keycloak-secrets-vol
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "keycloak-secrets-provider"
        {{- end }}
        - name: keycloak-cacerts-vol
          secret:
            secretName: keycloak-cacerts
            optional: true
      {{- if .Values.global.ecr.enabled }}
      imagePullSecrets:
      - name: aws-ecr-credentials
      {{- end }}
      containers:
      - name: keycloak
        image: {{ .Values.keycloak.image }}:{{ .Values.keycloak.tag | default "18.0.2" }}
        imagePullPolicy: {{ .Values.keycloak.imagePullPolicy | default "Always" }}
        {{- if .Values.keycloak.resources }}
        resources:
          requests:
            {{- if .Values.keycloak.resources.memory }}
            memory: "{{ .Values.keycloak.resources.memory }}Gi"
            {{- end }}
            {{- if .Values.keycloak.resources.cpu }}
            cpu: "{{ .Values.keycloak.resources.cpu }}000m"
            {{- end }}
        {{- end }}
        ports:
          - name: liveness-port
            containerPort: 8080
            hostPort: 8080
          - containerPort: 8443
          - containerPort: 4444
        startupProbe:
          initialDelaySeconds: 30
          failureThreshold: 2
          periodSeconds: 10
          httpGet:
            path: /health/ready
            port: liveness-port
        {{- if .Values.ingress.admin.enabled }}
        # Runs a script that sets the master realm's Frontend URL to the Admin Hostname
        readinessProbe:
          initialDelaySeconds: 5
          failureThreshold: 2
          successThreshold: 1
          periodSeconds: 30
          timeoutSeconds: 30
          exec:
            command: ["/usr/bin/bash", "-c", "/usr/local/bin/admin_frontend_url.sh", "/tmp/admin_frontend_url.log"]
        {{- end }}
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 15
          successThreshold: 1
          httpGet:
            path: /health/ready
            port: liveness-port
        volumeMounts:
          {{- if eq  .Values.secrets.provider "secrets-store-csi" }}
          - name: keycloak-secrets-vol
            mountPath: "/mnt/keycloak-secrets"
            readOnly: true
          {{- end }}
          - name: keycloak-cacerts-vol
            mountPath: "/mnt/keycloak-cacerts"
            readOnly: true
        envFrom:
        - configMapRef:
            name: keycloak-config
        env:
          {{- /* output env vars for Keycloak secrets (_helpers.tpl) */}}
          {{- include "resources.env.secrets" . | indent 6 }}
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 10
      tolerations:
      - effect: NoExecute
        key: node.kubernetes.io/not-ready
        operator: Exists
        tolerationSeconds: 300
      - effect: NoExecute
        key: node.kubernetes.io/unreachable
        operator: Exists
        tolerationSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: service-keycloak
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  annotations:
    #  Health check path annotations
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/backend-protocol: HTTPS
spec:
  type: NodePort
  selector:
    app: keycloak
  ports:
    - name: http
      protocol: TCP
      port: 8443
      targetPort: 8443
---
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  name: keycloak-jgroups-ping
spec:
  type: ClusterIP
  clusterIP: None
  sessionAffinity: None
  selector:
    app: keycloak
  ports:
    - port: 4444
      name: ping
      protocol: TCP
      targetPort: 4444
  
  
