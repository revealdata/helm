{{- if .Values.keycloak.caTrustStore }}
{{- if not .Values.keycloak.caTrustStore.useExistingSecret }}
{{- if not (empty .Values.keycloak.caTrustStore.cacerts) }}
---
# Keycloak Trusted CA Certs
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.keycloak.caTrustStore.secretName | default "keycloak-cacerts" }}
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  labels:
    application: "keycloak"
    certs: {{ len .Values.keycloak.caTrustStore.cacerts | quote }}
type: Opaque
data:
  {{- range $caCert := .Values.keycloak.caTrustStore.cacerts }}
  {{- if and $caCert.name $caCert.cert  }}
  {{- if and (not (hasSuffix ".pem" $caCert.name)) (not (hasSuffix ".crt" $caCert.name)) }}
    {{ printf "%s%s" $caCert.name ".pem" }}: {{ $caCert.cert | b64enc }}
  {{- else }}
    {{ $caCert.name }}: {{ $caCert.cert | b64enc }}
  {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .Values.keycloak.proxy.security }}
{{- if not .Values.keycloak.proxy.security.useExistingSecret }}
---
# Keycloak Security Context
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.keycloak.proxy.security.secretName | default "keycloak-proxy-security" }}
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  labels:
    application: "keycloak"
type: Opaque
data:
  nginx_security.yaml: {{ toYaml .Values.keycloak.proxy.security | b64enc }}
{{- end }}
{{- end }}

{{- if .Values.global.ecr.enabled }}
{{- $region := (.Values.global.ecr.region | default "us-east-1") }}
{{- $account := (.Values.global.ecr.account | default "053522176595") }}
{{- $server := (.Values.global.ecr.host | default (printf "%s.dkr.ecr.%s.amazonaws.com" $account $region)) }}
{{- $username := (.Values.global.ecr.username | default "AWS") }}
{{- $password := (.Values.global.ecr.password | default "NULL") }}
{{- $secretValue := printf "{\"auths\": {\"%s\": {\"username\": \"%s\", \"password\": \"%s\" } } }" $server $username $password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: "aws-ecr-credentials"
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  labels:
    ecr.host: {{ $server }}
    ecr.user: {{ $username }}
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ $secretValue | b64enc | quote}}
{{- end }}

