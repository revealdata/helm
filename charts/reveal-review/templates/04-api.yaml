---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: review-api
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  labels:
{{ $labels :=  mergeOverwrite .Values.review.labels .Values.review.api.labels }}
{{- toYaml $labels | indent 4 }}
spec:
  selector:
    matchLabels:
      app: deployment-review-api
  progressDeadlineSeconds: 600
  replicas: {{ .Values.review.api.replicas | default 1 }}
  revisionHistoryLimit: 2
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: deployment-review-api
      {{- if .Values.review.reloadOnUpgrade }}
      annotations:
        timestamp: {{ now | quote }}
      {{- end }}
    spec:
      nodeSelector:
{{ $nodeSelector := mergeOverwrite .Values.review.nodeSelector.linux .Values.review.api.nodeSelector }}
{{- toYaml $nodeSelector | indent 8 }}
      containers:
      - image: {{.Values.review.api.image}}:{{.Values.review.api.tag}}
        {{- if .Values.review.api.livenessProbe }}
        livenessProbe:
        {{- $livenessProbe := deepCopy .Values.review.api.livenessProbe }}
{{ toYaml .Values.review.api.livenessProbe | indent 10 }}
        {{- end }}
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: "review-env"
        env:
{{- /* output env vars for Review secrets (_helpers.tpl) */}}
{{- include "resources.env.secrets" . | indent 6 }}
        resources:
{{ toYaml .Values.review.api.resources | indent 10 }}
        imagePullPolicy: Always
        name: review-api
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        {{- if .Values.review.api.args }}
        args:
          {{ toYaml .Values.review.api.args | nindent 8 }}
        {{- end }}
        {{- if .Values.review.api.command }}
        command:
          {{ toYaml .Values.review.api.command | nindent 8 }}
        {{- end }}
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      tolerations:
{{ $tolerations := concat .Values.review.tolerations.linux .Values.review.api.tolerations }}
{{- toYaml $tolerations | indent 8 }}

---
apiVersion: v1
kind: Service
metadata:
  name: service-review-api
  namespace: {{ .Values.global.namespace | default .Release.Name }}
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-path: /rest/api/version

spec:
  selector:
    app: deployment-review-api
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
{{/*{{- if .Values.review.api.PodDisruptionBudget.enabled | default false }}*/}}
{{/*---*/}}
{{/*apiVersion: policy/v1*/}}
{{/*kind: PodDisruptionBudget*/}}
{{/*metadata:*/}}
{{/*  name: {{ .Values.review.api.PodDisruptionBudget.name }}*/}}
{{/*spec:*/}}
{{/*  selector:*/}}
{{/*    matchLabels:*/}}
{{/*      app: deployment-review-api*/}}
{{/*{{- if .Values.review.api.PodDisruptionBudget.minAvailable }}*/}}
{{/*  minAvailable: {{ .Values.review.api.PodDisruptionBudget.minAvailable }}*/}}
{{/*{{- end }}*/}}
{{/*{{- if .Values.review.api.PodDisruptionBudget.maxUnavailable }}*/}}
{{/*  maxUnavailable: {{ .Values.review.api.PodDisruptionBudget.maxUnavailable }}*/}}
{{/*{{- end }}*/}}
{{/*{{- end -}}*/}}