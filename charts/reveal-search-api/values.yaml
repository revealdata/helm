# Default values for Graphql.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
name: "reveal-search-api"
replicaCount: 3
env: dev

ConfigMap: 
  data: 
    esHost: ""
    eeAuth: ""
    esPort: "9200"
    enableGqlPlayground: "false"
    dataopsToolsImage: "475250404638.dkr.ecr.us-east-1.amazonaws.com/reveal-dataops-tools"
    dataopsToolsImageTag: "11.0.5"
    onFailureRetries: "3"
    tolerations: []
    resources:
      requests:
        cpu: 500m
        memory: 500Mi
      limits:
        cpu: 4000m
        memory: 10Gi

argoWorkflowsArtifactRepository:
  implementation: "standard"
  # If `implementation` is set to `custom` then use this data, otherwise use the s3bucket setting only.
  data:
    artifactRepository: |
      s3:
        bucket: argo-artifacts
        endpoint: s3.amazonaws.com      #AWS => s3.amazonaws.com; GCS => storage.googleapis.com
        useSDKCreds: true               #tells argo to use AWS SDK's default provider chain, enable for things like IRSA support
  # Used if `implementation` is not set to `custom`
  s3bucket: "argo-artifacts"

image: 475250404638.dkr.ecr.us-east-1.amazonaws.com/reveal-search-cli
tag: 11.0.5
args: ["api"]
port: 
  containerport: 8080
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: reveal-search-api-sa
  irsa: ""

PodDisruptionBudgetReveal_search_api:
  name: PDBreveal-serach-api
  enabled: true
  minAvailable: 1
  maxUnavailable:

service:
  type: NodePort
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  annotations:    
    ingress: alb
    scheme: internal
    load_balancer_name: "reveal-search-api"
    tags: Application=reveal-search-api
  sslCertArn: ""
  hostname: ""
  Port:
    number: 80
  labels:
    component: api

resources: 
  requests: 
    cpu: 165m
    memory: 256Mi
  limits: 
    cpu: 2000m
    memory: 2046Mi

nodeSelector: {}

tolerations: []

affinity: {}

#troubleshooting Postgress authentication
# https://github.com/bitnami/charts/issues/2061

argo-workflows:
  postgresql:
    auth:
      username: "postgres"
      password: ""
  controller:
    existingConfigMap: "workflow-controller-configmap"
    resources: 
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 1024Mi
  server:
    resources: 
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 2000m
        memory: 1024Mi
spark-operator:
  resources: 
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 2000m
      memory: 1024Mi
  
  
